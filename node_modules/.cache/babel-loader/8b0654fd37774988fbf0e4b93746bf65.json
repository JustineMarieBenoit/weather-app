{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jimmy\\\\Desktop\\\\Projects\\\\weather-app\\\\src\\\\components\\\\WeatherForecast\\\\WeatherForecast.js\";\nimport React, { useState } from 'react';\nimport WeatherConditions from '../WeatherConditions/WeatherConditions';\n\nconst WeatherForecast = () => {\n  let [city, setCity] = useState('');\n  let [forecast, setForecast] = useState({});\n  let [unit, setUnit] = useState('imperial');\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    setError(false);\n    setForecast({});\n    setLoading(true);\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d9cb56b47fmsh7c0659317c13d37p1db628jsn2f72e66714c8\"\n      }\n    }).then(forecast => forecast.json()).then(forecast => {\n      if (forecast.cod !== 200) {\n        throw new Error();\n      }\n\n      setForecast(forecast);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"weather-forecast\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"What's The Weather Like?\"), React.createElement(\"form\", {\n    onSubmit: getForecast,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter City\",\n    maxLength: \"50\",\n    value: city,\n    onChange: e => setCity(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"imperial\",\n    value: \"imperial\",\n    onChange: e => setUnit(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), \"Fahrenheit\"), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"metric\",\n    value: \"metric\",\n    onChange: e => setUnit(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), \"Celcius\")), React.createElement(\"div\", {\n    className: \"form-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Let's Find Out!\"))), React.createElement(WeatherConditions, {\n    forecast: forecast,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\n\nexport default WeatherForecast;","map":{"version":3,"sources":["C:/Users/jimmy/Desktop/Projects/weather-app/src/components/WeatherForecast/WeatherForecast.js"],"names":["React","useState","WeatherConditions","WeatherForecast","city","setCity","forecast","setForecast","unit","setUnit","error","setError","loading","setLoading","uriEncodedCity","encodeURIComponent","getForecast","e","preventDefault","length","fetch","then","json","cod","Error","catch","err","console","log","message","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport WeatherConditions from '../WeatherConditions/WeatherConditions'\r\n\r\n\r\nconst WeatherForecast = () => {\r\n    let [city, setCity] = useState('')\r\n    let [forecast, setForecast] = useState({})\r\n    let [unit, setUnit] = useState('imperial')\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n\r\n    const uriEncodedCity = encodeURIComponent(city)\r\n\r\n    function getForecast(e) {\r\n        e.preventDefault()\r\n\r\n        if (city.length === 0) {\r\n            return setError(true)\r\n        }\r\n\r\n        setError(false)\r\n        setForecast({})\r\n        setLoading(true)\r\n\r\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"d9cb56b47fmsh7c0659317c13d37p1db628jsn2f72e66714c8\"\r\n            }\r\n        })\r\n            .then(forecast => forecast.json())\r\n            .then(forecast => {\r\n                if (forecast.cod !== 200) {\r\n                    throw new Error()\r\n                }\r\n                setForecast(forecast)\r\n                setLoading(false)\r\n            })\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(err.message);\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"weather-forecast\">\r\n            <h2>What's The Weather Like?</h2>\r\n            <form onSubmit={getForecast}>\r\n                <div className=\"form-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter City\"\r\n                        maxLength=\"50\"\r\n                        value={city}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-radio\">\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"units\"\r\n                            checked={unit === \"imperial\"}\r\n                            value=\"imperial\"\r\n                            onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                        Fahrenheit\r\n                </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"units\"\r\n                            checked={unit === \"metric\"}\r\n                            value=\"metric\"\r\n                            onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                        Celcius\r\n                </label>\r\n                </div>\r\n                <div className=\"form-btn\">\r\n                    <button type=\"submit\">Let's Find Out!</button>\r\n                </div>\r\n            </form>\r\n            <WeatherConditions\r\n                forecast={forecast}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherForecast;\r\n"]},"metadata":{},"sourceType":"module"}