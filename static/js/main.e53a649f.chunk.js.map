{"version":3,"sources":["components/WeatherConditions/WeatherConditions.js","components/WeatherGraphics/WeatherGraphics.js","components/WeatherForecast/WeatherForecast.js","App.js","serviceWorker.js","index.js"],"names":["WeatherConditions","props","className","error","role","aria-label","loading","forecast","cod","name","src","weather","icon","trim","alt","description","Math","round","main","temp","WeatherGraphics","WeatherForecast","useState","city","setCity","setForecast","unit","setUnit","setError","setLoading","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","length","fetch","then","json","Error","catch","err","console","log","message","type","placeholder","maxLength","value","onChange","target","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e53a649f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './WeatherConditions.css'\r\n\r\nconst WeatherConditions = props => {\r\n    return (\r\n        <div className=\"weather-conditions\">\r\n            {props.error && (\r\n                <div className=\"error\">\r\n                    <h2>Oops!</h2>\r\n                    <span\r\n                        role=\"img\"\r\n                        className=\"error-emoji\"\r\n                        aria-label=\"oops\"\r\n                    >\r\n                        &#128563;\r\n                        </span>\r\n                    <h4>No results found. Let's try another city.</h4>\r\n                </div>\r\n            )}\r\n            {props.loading && (\r\n                <div className=\"spinner\">\r\n                    <div className=\"double-bounce1\"></div>\r\n                    <div className=\"double-bounce2\"></div>\r\n                </div>\r\n            )}\r\n            {props.forecast.cod === 200 ?\r\n                (\r\n                <div className=\"weather-result\">\r\n                    <h2>{props.forecast.name}</h2>\r\n                    <img src={`http://openweathermap.org/img/wn/${props.forecast.weather[0].icon}@2x.png`.trim()}\r\n                    alt={props.forecast.weather[0].description}\r\n                    />\r\n                    <h4>It is currently {Math.round(props.forecast.main.temp)} degrees out with {props.forecast.weather[0].description}.</h4>\r\n                </div>\r\n                )\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherConditions","import React from 'react'\r\nimport './WeatherGraphics.css'\r\n\r\nconst WeatherGraphics = () => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"sun\"></div>\r\n            <div className=\"cloud\">\r\n                <div className=\"cloud1\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"cloud1 c_shadow\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cloud_s\">\r\n                <div className=\"cloud1\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"cloud1 c_shadow\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cloud_vs\">\r\n                <div className=\"cloud1\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"cloud1 c_shadow\">\r\n                    <ul>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                        <li></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"thunder\"></div>\r\n            <div className=\"rain\">\r\n                <ul>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"sleet\">\r\n                <ul>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherGraphics","import React, { useState } from 'react'\r\nimport WeatherConditions from '../WeatherConditions/WeatherConditions'\r\nimport WeatherGraphics from '../WeatherGraphics/WeatherGraphics'\r\nimport './WeatherForecast.css'\r\n\r\n\r\nconst WeatherForecast = () => {\r\n    let [city, setCity] = useState('')\r\n    let [forecast, setForecast] = useState({})\r\n    let [unit, setUnit] = useState('imperial')\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n\r\n    const uriEncodedCity = encodeURIComponent(city)\r\n\r\n    function getForecast(e) {\r\n        e.preventDefault()\r\n\r\n        if (city.length === 0) {\r\n            return setError(true)\r\n        }\r\n\r\n        setError(false)\r\n        setForecast({})\r\n        setLoading(true)\r\n\r\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"d9cb56b47fmsh7c0659317c13d37p1db628jsn2f72e66714c8\"\r\n            }\r\n        })\r\n            .then(forecast => forecast.json())\r\n            .then(forecast => {\r\n                if (forecast.cod !== 200) {\r\n                    throw new Error()\r\n                }\r\n                setForecast(forecast)\r\n                setLoading(false)\r\n            })\r\n            .catch(err => {\r\n                setError(true);\r\n                setLoading(false);\r\n                console.log(err.message);\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"weather-forecast\">\r\n            <h2>What's The Weather Like?</h2>\r\n            <WeatherGraphics />\r\n            <form onSubmit={getForecast}>\r\n                <div className=\"form-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Enter City\"\r\n                        maxLength=\"50\"\r\n                        value={city}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-radio\">\r\n                    <label className=\"radio-btn\">\r\n                    Fahrenheit\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"units\"\r\n                            checked={unit === \"imperial\"}\r\n                            value=\"imperial\"\r\n                            onChange={(e) => setUnit(e.target.value).trim()}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                </label>\r\n                    <label className=\"radio-btn\">\r\n                    Celcius\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"units\"\r\n                            checked={unit === \"metric\"}\r\n                            value=\"metric\"\r\n                            onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                        <span className=\"checkmark\"></span>\r\n                </label>\r\n                </div>\r\n                <div className=\"form-btn\">\r\n                    <button type=\"submit\">Let's Find Out!</button>\r\n                </div>\r\n            </form>\r\n            <WeatherConditions\r\n                forecast={forecast}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default WeatherForecast;\r\n","import React from 'react'\nimport './App.css'\nimport WeatherForecast from \"./components/WeatherForecast/WeatherForecast\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <WeatherForecast />\n      </main>\n      <footer>\n        Created by Justine Benoit\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}